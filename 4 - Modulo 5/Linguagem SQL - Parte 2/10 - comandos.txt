Filtrando Consultas com WHERE:
  O que ele disponibiliza?
    Resposta: Disponibiliza uma filtragem dos dados consultados
    Exemplos:
      1 - Selecionar uma coluna específica de uma tabela (código igual a 1):
        SELECT * FROM produto WHERE codigo = 1;
      2 - Selecionar uma coluna específica de uma tabela (tipo igual a 'Notebook'):
        SELECT * FROM dispositivo WHERE tipo = 'Notebook';

Consultas em Múltiplas Tabelas:
  Qual o conceito para realizar uma busca múltipla?
    Resposta: O conceito se baseia em filtrar a chave estrangeira de uma tabela e referencia-la a chave primária da outra tabela.
  O que ele possibilita?
    Resposta: Possibilita consultar várias tabelas em uma mesma consulta
    Exemplos:
      1 - Consultar o tipo do produto e o preço do produto:
        SELECT prod.cod AS codigo, prod.preco AS preco, tipo.desc AS descricao 
          FROM produto AS prod, tipo_produto AS tipo
          WHERE prod.codigo_tipo_produto = tipo.codigo;
      2 - Sem o uso de 'Aliases' (comando 'AS'):
        SELECT idFuncionario, nome, nomeCargo
          FROM funcionario, cargo
          WHERE funcionario.idCargo = cargo.codigo;

Junção de Tabelas:
  Como é feita a junção de tabelas?
    Resposta: Para criarmos uma junção de tabelas devemos definir os critérios de agrupamento para trazer estes dados.
    Ou seja: É criada uma pseudo-tabela derivada de duas ou mais tabelas de acordo com as regras especificadas.
  Junção de produto cartesiano:
    Conceito: Essa junção (produto cartesiano), geralmente entre duas tabelas, origina uma terceira tabela com os dados de ambas as tabelas combinados.
    Exemplo:
      1 - Consultar o nome e o cargo do cliente, sendo o nome da tabela 'cliente' e o cargo da tabela 'profissão':
        SELECT c.idCliente, c.nome, p.cargo
          FROM cliente AS c, profissao AS p
          WHERE c.idProfissao = p.idProfissao;
  Junção Interna (Inner Join):
    Conceito: Essa junção (inner join), é uma consulta que retorna apenas os dados que atendem às condições de junção.
    Ou seja: Quais linhas de uma tabela se relacionam com as linhas de outras tabelas.
    Analogia: Podemos fazer uma analogia da cláusula 'ON' (usada na junção 'inner join') com a cláusula 'WHERE' (usada na junção de 'produto cartesiano').
    Exemplo:
      1 - Consultar o nome e o cargo do cliente, sendo o nome da tabela 'cliente' e o cargo da tabela 'profissão' (mesmo resultado que a junção de 'produto cartesiano'):
        SELECT c.idCliente, c.nome, p.cargo
          FROM cliente AS c INNER JOIN profissao AS p
          ON c.idProfissao = p.idProfissao;
  Junção Externa (Outer Join):
    Conceito: Essa junção (Outer Join), é uma consulta que não requer que os registros de uma tabela possuam registros equivalentes em outra tabela.
    Ou seja: Essa junção se subdivide dependendo da tabela que admitiremos os registros que não possuem correspondência:
    Exemplos:
      * Esquerda (Left):
        Conceito: A tabela a esquerda será ordenada com base na tabela a direita.
        Ou seja: Retorna SEMPRE todos os registros da tabela à esquerda (mesmo se não existir registro), caso não exista registro o valor NULL é retornado.
        Exemplo:
          1 - Consultar os dados das tabelas cliente e profissão com os dados da tabela profissão correspondendo aos dados da tabela cliente:
            SELECT * FROM cliente AS c
              LEFT OUTER JOIN profissao AS p
              ON c.idProfissao = p.idProfissao;
      * Direita (Right):
        Conceito: A tabela a direita será ordenada com base na tabela a esquerda.
        Ou seja: Retorna SEMPRE todos os registros da tabela à direita (mesmo se não existir registro), caso não exista registro o valor NULL é retornado.
        Exemplo:
          1 - Consultar os dados das tabelas cliente e profissão com os dados da tabela cliente correspondendo aos dados da tabela profissão:
            SELECT * FROM cliente AS c
              RIGHT OUTER JOIN profissao AS p
              ON c.idProfissao = p.idProfissao
      * Ambas (Full):
        Conceito: Nessa consulta serão apresentados todos os dados das tabelas à esquerda e à direita, mesmo que não possuam correspondência na outra tabela.
        Ou seja: A pseudo-tabela possuirá assim todos os registros de ambas as tabelas (mesmo se não existir registro), caso não exista registro o valor NULL é retornado.
        Exemplos:
          1 - Consultar os dados das tabelas cliente e profissão, de acordo com suas correspondências:
            SELECT * FROM cliente AS c
              FULL OUTER JOIN profissao AS p
              ON c.idProfissao = p.idProfissao
          2 - Mesmo exemplo do '1', porém, no contexto do 'MySQL':
            SELECT * FROM cliente AS c
              LEFT OUTER JOIN profissao AS p
              ON c.idProfissao = p.idProfissao
            UNION
            SELECT * FROM cliente AS c
              RIGHT OUTER JOIN profissao AS p
              ON c.idProfissao = p.idProfissao;
  Junção Cruzada (Cross Join):
    Conceito: Usada quando desejamos unir tabelas por cruzamento.
    Ou seja: Para cada linha da tabela queremos realizar uma união com os dados de outra tabela.
    Exemplo:
      1 - Consultar cada cliente e colocar uma linha com cada profissão.
        SELECT c.idCliente, c.nome, c.data_nasc, c.telefone, p.cargo
          FROM cliente AS c
          CROSS JOIN profissao AS p;
  Auto Junção (Self Join):
    Conceito: Usada para unir uma tabela a si mesma.
    Exemplo:
      1 - Consultar na tabela os IDs diferentes, porém, as cidades iguais (desejo consultar os consumidores que moram na mesma cidade)
        SELECT cons1.nome AS Consumidor_1, cons2.nome AS Consumidor_2, cons1.cidade
          FROM consumidor AS cons1
          INNER JOIN consumidor AS cons2
          ON cons1.id <> cons2.id
          AND cons1.cidade = cons2.cidade;
  Junção Baseada em Comparador (Equi-Join):
    Conceito: Usada para realização de comparações de igualdade na junção.
    Ou seja: Realiza uma comparação de igualdade e une as tabelas.
    Exemplo:
      1 - Consultar todos os dados das tabelas 'cliente' e 'profissao' comparando o 'idProfissao':
        SELECT *
          FROM cliente AS c
          JOIN profissao AS p
          ON c.idProfissao = p.idProfissao;
  Junção Natutal (Natural Join):
    Conceito: Usada para unir tabelas, não duplicando as combinações que são iguais em seus nomes de atributos comuns.
    Ou seja: Caso tenha uma chave estrangeira entre duas tabelas, é gerada apenas 1 coluna com o ID da mesma.
    Exemplo:
      1 - Consultar todos os dados das tabelas 'cliente' e 'profissao', gerando apenas 1 coluna para os atributos iguais:
        SELECT *
          FROM cliente
          NATURAL JOIN profissao;

Funções de Agregação:
  Conceito: Funções nativas para agregar um conjunto de valores em um único resultado.
  Quais são elas?
    Resposta:
      * Máximo (MAX):
        Conceito: Usado para analisar um conjunto de valores e retorna o maior entre eles.
        Exemplos:
          1 - Consultar o produto com maior valor:
            SELECT MAX(preco) FROM produto;
          2 - Consultar o maior preço de venda em cada categoria de produto:
            SELECT idCategoria, MAX(preco) FROM produto GROUP BY idCategoria;
      * Mínimo (MIN):
        Conceito: Usado para analisar um conjunto de valores e retorna o menor entre eles.
        Exemplos:
          1 - Consultar o produto com menor valor:
            SELECT MIN(preco) FROM produto;
          2 - Consultar o menor preço de venda em cada categoria de produto:
            SELECT idCategoria, MIN(preco) FROM produto GROUP BY idCategoria;
      * Soma (SUM):
        Conceito: Usado para realizar soma dos valores em uma única coluna e retorna esse resultado.
        Exemplos:
          1 - Consultar a soma de todos os produtos:
            SELECT SUM(preco) FROM produto;
          2 - Consultar a soma de todos os preços de venda dos produtos, onde categoria igual a 1:
            SELECT SUM(preco) FROM produto WHERE idCategoria = 1;
      * Valor médio (AVG):
        Conceito: Usado para calcular a média aritmética dos valores em uma única coluna.
        Exemplos:
          1 - Consultar o valor médio dos produtos:
            SELECT AVG(preco) FROM produto;
          2 - Consultar o valor médio dos produtos em cada categoria:
            SELECT idCategoria, AVG(preco) FROM produto GROUP BY idCategoria;
      * Arredondar (ROUND):
        Conceito: Usado para arredondar valores mediante as casas decimais passadas para a função.
        Exemplo:
          1 - Calcular a média aritmética dos produtos e arredondar o valor com duas casas decimais:
            SELECT ROUND(AVG(preco), 2) FROM produto;
      * Contar (COUNT):
        Conceito: Usado para retorna o total de linhas de uma tabela.
        Exemplo:
          1 - Calcular a quantidade de produtos cadastrados com a categoria 1.
            SELECT COUNT(preco) AS Quantidade FROM produto WHERE idCategoria = 1;

Funções de Agrupamento e Ordenação:
  Conceito: Recursos nativos para agrupar e/ou ordernar os resultados para uma melhor apresentação.
  Quais os tipos de Agrupamento existentes?
    Resposta:
      * Agrupar por (GROUP BY):
        Conceito: Usado para agrupar elementos do mesmo tipo.
        Exemplo:
          1 - Consultar o valor médio dos produtos em cada categoria:
            SELECT idCategoria, AVG(preco) FROM produto GROUP BY idCategoria;
      * Tendo (HAVING):
        Analogia: Podemos fazer uma analogia da cláusula 'HAVING' (usada no agrupamento e ordenação) com a cláusula 'WHERE' (usada geralmente com o SELECT).
        Exemplo:
          1 - Consultar o maior preço de venda em cada categorias de produtos, na qual o preço seja maior que 10,00:
            SELECT idCategoria, MAX(preco) FROM produto GROUP BY idCategoria HAVING MAX(preco) > 10;
      * Ordenar por (ORDER BY):
        Conceito: Usado para organizar os dados em ordem alfabética ou numérica.
        Quais os tipos de ordenação existentes?
          Resposta:
            * Ascendente (ASC):
              Conceito: Essa ordenação é do menor para o maior. Por padrão é sempre ordenado pelo ascendente, levando em consideração o 'id'
              Exemplo:
                1 - Ordenar os preços dos produtos do mais barato para o mais caro:
                  SELECT nome, preco FROM produto ORDER BY preco ASC;
            * Descendente (DESC):
              Conceito: Essa ordenação é do maior para o menor.
              Exemplo:
                1 - Ordenar os preços dos produtos do mais caro para o mais barato:
                  SELECT nome, preco FROM produto ORDER BY preco DESC;

Funções de Data e Hora:
  Conceito: Recursos nativos para tratamento e formação de hora e data.
  Quais as funções existentes?
    Resposta:
      * Data atual (CURDATE):
        Conceito: Usada para retornar a data atual (formato aaaa-mm-dd).
        Exemplo:
          1 - Atualizar o campo 'updatedAt' da tabela 'produto' com a data atual:
            UPDATE produto set updatedAt = CURDATE() WHERE codigo = 1;
      * Horário atual (CURTIME):
        Conceito: Usado para retornar o horário atual (formato hh:mm:ss).
        Exemplo:
          1 - Atualizar o campo 'updatedAtTime' da tabela 'produto' com o horário atual:
            UPDATE produto set updatedAtTime = CURTIME() WHERE codigo = 1;
        Existe outro método de usar?
          Resposta: Sim, usando o comando 'CURRENT_TIME'.
      * Adicionar intervalo de data (DATE_ADD):
        Conceito: Usado para adicionar um intervalo à uma data.
        Exemplo:
          1 - Atualizar o campo 'dataVenc' da tabela 'produto' adicionando um intervalo de 7 dias:
            UPDATE produto set dataVenc = DATE_ADD(CURDATE(), INTERVAL 7 DAY) WHERE codigo = 2;
      * Subtrair intervalo de data (DATE_SUB):
        Conceito: Usado para subtrair um intervalo de uma data.
        Exemplo:
          1 - Atualizar o campo 'dataCompra' de um item da tabela 'produto', subtraindo um intervalo de 10 dias:
            UPDATE produto set dataCompra = DATE_SUB(CURDATE(), INTERVAL 10 DAY) WHERE codigo = 3;
      * Formatar data (DATE_FORMAT):
        Conceito: Usado para retornar a data no formato especificado.
        Exemplo:
          1 - Atualizar o campo 'updatedAt' da tabela 'produto' para o formato usado no Brasil (dd/mm/yyyy):
            UPDATE produto set updatedAt = DATE_FORMAT(CURDATE(), '%d/%m/%Y') WHERE codigo = 1;
      * Nome do dia da semana (DAYNAME):
        Conceito: Usado para retornar o nome do dia da semana
        Exemplo:
          1 - Atualizar o campo 'updatedOnDayNameWeek' da tabela 'produto' para o nome do dia da semana atual (retorna o nome em inglês):
            UPDATE produto set updatedOnDayNameWeek = DAYNAME(CURDATE()) WHERE codigo = 1;
        É possível retornar o nome do dia da semana em pt-BR?
          Resposta: Sim, basta usar o comando abaixo antes do comando 'UPDATE':
            SET LC_TIME_NAMES = 'pt_BR';
      * Dia do mês (DAYOFMONTH):
        Conceito: Usado para retornar o dia do mês
        Exemplo:
          1 - Atualizar o campo 'updatedOnDay' da tabela 'produto' para o dia do mês atual (retorna o nome em inglês):
            UPDATE produto set updatedOnDay = DAYOFMONTH(CURDATE()) WHERE codigo = 1;
        É possível retornar o dia do mês em pt-BR?
          Resposta: Sim, basta usar o comando abaixo antes do comando 'UPDATE':
            SET LC_TIME_NAMES = 'pt_BR';
      * Dia da semana (DAYOFWEEK):
        Conceito: Usado para retornar o dia da semana
        Exemplo:
          1 - Atualizar o campo 'updatedOnDayWeek' da tabela 'produto' para o dia da semana atual (retorna o nome em inglês):
            UPDATE produto set updatedOnDayWeek = DAYOFWEEK(CURDATE()) WHERE codigo = 1;
        É possível retornar o dia da semana atual em pt-BR?
          Resposta: Sim, basta usar o comando abaixo antes do comando 'UPDATE':
            SET LC_TIME_NAMES = 'pt_BR';
      * Dia do ano (DAYOFYEAR):
        Conceito: Usado para retornar o dia do ano (1 ano tem +- 365 dias)
        Exemplo:
          1 - Atualizar o campo 'updatedOnDayYear' da tabela 'produto' para o dia do ano atual (retorna o nome em inglês):
            UPDATE produto set updatedOnDayYear = DAYOFYEAR(CURDATE()) WHERE codigo = 1;
        É possível retornar o dia do ano atual em pt-BR?
          Resposta: Sim, basta usar o comando abaixo antes do comando 'UPDATE':
            SET LC_TIME_NAMES = 'pt_BR';
      * Data e hora atual (NOW):
        Conceito: Usado para retornar a data e hora atual (formato aaaa-mm-dd hh:mm:ss)
        Exemplo:
          1 - Atualizar o campo 'updatedAt' da tabela 'produto' para a data e hora atual:
            UPDATE produto set updatedAt = NOW() WHERE codigo = 1;
        Existe outro método de usar?
          Resposta: Sim, usando o comando 'CURRENT_TIMESTAMP'.
      * Diferença entre horários (TIME_DIFF):
        Conceito: Usado para retornar a diferença entre 2 horários
        Exemplo:
          1 - Atualizar o campo 'updatedIn' da tabela 'produto' para a diferença entre a data de início e a data de fim da transação:
            UPDATE produto set updatedIn = TIME_DIFF('22:03:15', CURTIME()) WHERE codigo = 1;